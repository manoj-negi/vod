// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.20.0
// source: video.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createVideo = `-- name: CreateVideo :one
INSERT INTO videos (
  name,
  uploaded_by
) VALUES (
  $1, $2
) RETURNING id, name, uploaded_by, is_active, created_at, updated_at
`

type CreateVideoParams struct {
	Name       string `json:"name"`
	UploadedBy int32  `json:"uploaded_by"`
}

func (q *Queries) CreateVideo(ctx context.Context, arg CreateVideoParams) (Video, error) {
	row := q.db.QueryRow(ctx, createVideo, arg.Name, arg.UploadedBy)
	var i Video
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.UploadedBy,
		&i.IsActive,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const listVideos = `-- name: ListVideos :many
SELECT $1 || name AS full_url, uploaded_by, is_active
FROM videos
ORDER BY name
`

type ListVideosRow struct {
	FullUrl    interface{} `json:"full_url"`
	UploadedBy int32       `json:"uploaded_by"`
	IsActive   pgtype.Bool `json:"is_active"`
}

func (q *Queries) ListVideos(ctx context.Context, name string) ([]ListVideosRow, error) {
	rows, err := q.db.Query(ctx, listVideos, name)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []ListVideosRow{}
	for rows.Next() {
		var i ListVideosRow
		if err := rows.Scan(&i.FullUrl, &i.UploadedBy, &i.IsActive); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
